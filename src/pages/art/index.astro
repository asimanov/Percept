---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Nav from '../../components/Nav.astro';
import Header from '../../components/Header.astro';
import Aside from '../../components/Aside.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';

// 1. fetch & sort all posts by date descending
const posts: CollectionEntry<'art'>[] = (
  await getCollection('art')
).sort(
  (a: CollectionEntry<'art'>, b: CollectionEntry<'art'>) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// 2. group by collection name (fallback to “Uncategorized”)
const grouped = posts.reduce<Record<string, CollectionEntry<'art'>[]>>(
  (acc, post) => {
    const key = post.data.collection ?? 'Uncategorized';
    if (!acc[key]) acc[key] = [];
    acc[key].push(post);
    return acc;
  },
  {}
);

// 3a. define the order you control by editing this array:
const preferredOrder = [
  'Reverie Compendium',
  'Abducted by AI',
  // add more collection names here in the exact order you want them to appear
];

// 3b. build your final `collections` array:
const collections: string[] = [
  // first, any preferred names that actually exist in `grouped`
  ...preferredOrder.filter((name) => grouped[name]),
  // then any other collections, sorted alphabetically (or you could drop .sort())
  ...Object.keys(grouped)
    .filter((name) => !preferredOrder.includes(name))
    .sort(),
];
---

<style>
.percept-container {
  display: flex;
  flex-direction: row;
  gap: 40px;
}

.percept-journal {
  width: 100%;
}

.entry-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}

.entry {
  --card-box-shadow: none;
  border-radius: 6px;
  box-sizing: border-box;
  border-bottom: none;
  background: none;
  display: flex;
  flex-direction: column;
  justify-content: space-between;

  h5 {
    color: var(--set-color-purple);
  }

  &:hover {
    color: var(--set-color-purple);
  }
}

time {
  font-family: var(--set-font-mono);
}

.excerpt {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  overflow: hidden;
  text-overflow: ellipsis;
  text-wrap: balance;
}

h3 {
  --heading-underline-color: light-dark(var(--set-color-dark-purple),var(--set-color-light-purple));
  position: relative;
  margin-bottom: 26rem;

  &::after {
    content: "";
    display: block;
    width: 60rem;
    height: 6rem;
    background: var(--heading-underline-color);
    position: absolute;
    left: 0;
    bottom: -10rem;
  }
}

h4, h6 {
  --heading-underline-color: var(--set-color-base-inverse);
  position: relative;
  margin-bottom: 26rem;
  text-wrap: pretty;

  &::after {
    content: "";
    display: block;
    width: 60rem;
    height: 6rem;
    background: var(--heading-underline-color);
    position: absolute;
    left: 0;
    bottom: -10rem;
  }
}

h5 {
  text-wrap: pretty;
}

.header h3 {
  text-wrap: pretty;
}

@media (max-width: 900px) {
  .entry-container {
    gap: 10px;
  }
}

@media (max-width: 600px) {
  .entry-container {
    grid-template-columns: 1fr;
    gap: 10px;
  }
  .percept-container {
    flex-direction: column;
    gap: 10px;
  }
}
</style>

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <div class="App">
      <div class="Layout">
        <div class="Masthead">
          <Header />
        </div>

        <main class="Main">
          <Nav />

          <header>
            <div
              class="p-y-6 p-x-2 m-b-2"
              style="
                background: url(/assets/product/images/percept/p-bg-02.jpg) 50% no-repeat;
                background-size: cover;
                border-radius: 6rem;
              "
            >
              <!-- hero -->
            </div>
          </header>

          <div class="percept-container">
            <div class="percept-journal">
              {collections.map((colName: string) => (
                <>
                  <h3>{colName}</h3>
                  <div class="entry-container m-b-4">
                    {grouped[colName]
                      .sort(
                        (a: CollectionEntry<'art'>, b: CollectionEntry<'art'>) =>
                          b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
                      )
                      .map((post: CollectionEntry<'art'>) => (
                        <a href={`/art/${post.slug}`} class="entry bsln-card">
                          <div>
                            <p>
                              <time class="font-size--xs">
                                {new Date(post.data.pubDate).toLocaleDateString(
                                  'en-us',
                                  {
                                    year: 'numeric',
                                    month: 'numeric',
                                    day: 'numeric'
                                  }
                                )}
                              </time>
                            </p>
                            <h5>{post.data.title}</h5>
                          </div>
                          <img
                            src={post.data.thumb}
                            style="height:auto; width:100%; border-radius:6rem;"
                            alt={post.data.title}
                          />
                        </a>
                      ))}
                  </div>
                </>
              ))}
            </div>
          </div>
        </main>

        <div class="Aside">
          <Aside />
        </div>
      </div>

      <Footer />
    </div>
  </body>
</html>